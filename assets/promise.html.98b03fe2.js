import{_ as t,r as p,o as e,c as o,a as n,b as c,d as s,e as i}from"./app.d5c6f758.js";const l={},u=n("h1",{id:"promise",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#promise","aria-hidden":"true"},"#"),s(" Promise")],-1),r={href:"https://zh.javascript.info/async",target:"_blank",rel:"noopener noreferrer"},k=s("Promise\u53C2\u8003"),d=i(`<hr><h2 id="\u56DE\u8C03" tabindex="-1"><a class="header-anchor" href="#\u56DE\u8C03" aria-hidden="true">#</a> \u56DE\u8C03</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token parameter">src<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  script<span class="token punctuation">.</span>src <span class="token operator">=</span> src
  script<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>script<span class="token punctuation">)</span> <span class="token comment">//\u52A0\u8F7D\u6210\u529F\u4E8B\u4EF6</span>
  script<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">error for </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>src<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token string">&#39;/my/script.js&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> script</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5904\u7406 error</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u811A\u672C\u52A0\u8F7D\u6210\u529F</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="promise-1" tabindex="-1"><a class="header-anchor" href="#promise-1" aria-hidden="true">#</a> Promise</h2><ul><li><code>let promise = new Promise(function(resolve,reject){...})</code> \u72B6\u6001\u53EA\u6539\u4E00\u6B21 <ul><li><code>resolve(...)</code> state\u6539\u4E3A<code>fulfilled</code></li><li><code>reject(new Error(message))</code> state\u6539\u4E3A<code>rejected</code></li></ul></li><li><code>promise.then(result=&gt;{...},error=&gt;{...})</code></li><li><code>.catch(f)</code> <code>.then(null,f)</code> \u53EA\u5173\u5FC3\u9519\u8BEF</li><li><code>.finally(f)</code> <s><code>.then(f,f)</code></s> \u4E0D\u5173\u5FC3\u7ED3\u679C(\u5E38\u7528\u4E8E\u6E05\u7406) <ul><li>\u65E0\u53C2\u6570</li><li>\u900F\u660E</li><li>\u65E0\u8FD4\u56DE</li></ul></li><li>if promise is pending,the handler will waiting for its result. if it is settled,the handler will run immediately</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token parameter">src</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    script<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span>
    script<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
    script<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Script load error for </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>src<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token string">&quot;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.11/lodash.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
  <span class="token parameter">script</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>script<span class="token punctuation">.</span>src<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is loaded!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>error<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="promise-\u94FE" tabindex="-1"><a class="header-anchor" href="#promise-\u94FE" aria-hidden="true">#</a> Promise \u94FE</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
  <span class="token keyword">return</span> result <span class="token operator">*</span> <span class="token number">2</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token string">&quot;/article/promise-chaining/one.js&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">script</span> <span class="token operator">=&gt;</span> <span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token string">&quot;/article/promise-chaining/two.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">script</span> <span class="token operator">=&gt;</span> <span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token string">&quot;/article/promise-chaining/three.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">script</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u811A\u672C\u52A0\u8F7D\u5B8C\u6210\uFF0C\u6211\u4EEC\u53EF\u4EE5\u5728\u8FD9\u513F\u4F7F\u7528\u811A\u672C\u4E2D\u58F0\u660E\u7684\u51FD\u6570</span>
    <span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">three</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>.then(f)</code> \u603B\u662F\u8FD4\u56DE\u4E00\u4E2Apromise</strong></p><ol><li>\u521D\u59CB\u65F6pending+undifined (\u8DD1\u5B8C\u65F6fulfilled)</li><li>return value =&gt; fulfilled+value</li><li>return promise =&gt; the promise</li><li>throw error =&gt; reject+error</li></ol><h2 id="\u9519\u8BEF\u5904\u7406" tabindex="-1"><a class="header-anchor" href="#\u9519\u8BEF\u5904\u7406" aria-hidden="true">#</a> \u9519\u8BEF\u5904\u7406</h2><ul><li>\u53EA\u8981\u5728\u672B\u5C3E\u52A0\u4E0A<code>.catch(f)</code> \u4E0A\u8FF0\u4EFB\u610F\u4E00\u4E2Apromise reject \u5C31\u80FD\u6355\u83B7\u9519\u8BEF</li><li>\u5728promise\u4E2D<code>throw new Error()</code> == <code>reject(new Error())</code></li><li>\u7F16\u7A0B\u9519\u8BEF\u4E5F\u4F1A\u81EA\u52A8 reject</li><li><code>.catch(f)</code> \u8FD4\u56DE\u82E5fulfilled\u5219\u7EE7\u7EED<code>.then()</code> \u51FA\u9519\u5219\u8DF3\u5230<code>.catch()</code>(\u518D\u6B21\u629B\u51FA)</li><li>\u51FA\u9519\u672A\u6355\u83B7\u5C31\u62A5\u9519</li></ul><h2 id="promise-\u9759\u6001\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#promise-\u9759\u6001\u65B9\u6CD5" aria-hidden="true">#</a> Promise \u9759\u6001\u65B9\u6CD5</h2><ol><li><code>Promise.all(promises)</code> \u5E76\u884C\u6267\u884C \u5168\u597D\u4E86\u624D\u5F80\u4E0B \u8FD4\u56DE\u7ED3\u679C\u6570\u7EC4 \u6709\u9519\u5C31\u9519</li><li><code>Promise.allSettled(promises)</code> es2020 \u5168\u597D\u4E86\u8FD4\u56DE\u5BF9\u8C61\u6570\u7EC4 status&amp;value</li><li><code>Promise.race(promises)</code> \u7B49\u7B2C\u4E00\u4E2Asettled\u5E76\u8FD4\u56DE</li><li><code>Promise.any(promises)</code> es2021 \u7B49\u7B2C\u4E00\u4E2Afulfilled</li><li><code>Promise.resolve(value)</code> \u4F7F\u7528\u7ED9\u5B9A value \u521B\u5EFA\u4E00\u4E2A resolved \u7684 promise</li><li><code>Promise.reject(error)</code> \u4F7F\u7528\u7ED9\u5B9A error \u521B\u5EFA\u4E00\u4E2A rejected \u7684 promise</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;iliakan&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;remy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;jeresig&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> requests <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">name</span> <span class="token operator">=&gt;</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://api.github.com/users/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>requests<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">responses</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u6240\u6709\u54CD\u5E94\u90FD\u88AB\u6210\u529F resolved</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> response <span class="token keyword">of</span> responses<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>response<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>response<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5BF9\u5E94\u6BCF\u4E2A url \u90FD\u663E\u793A 200</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> responses<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// \u5C06\u54CD\u5E94\u6570\u7EC4\u6620\u5C04\uFF08map\uFF09\u5230 response.json() \u6570\u7EC4\u4E2D\u4EE5\u8BFB\u53D6\u5B83\u4EEC\u7684\u5185\u5BB9</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">responses</span> <span class="token operator">=&gt;</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>responses<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token comment">// \u6240\u6709 JSON \u7ED3\u679C\u90FD\u88AB\u89E3\u6790\uFF1A&quot;users&quot; \u662F\u5B83\u4EEC\u7684\u6570\u7EC4</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">users</span> <span class="token operator">=&gt;</span> users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>alert<span class="token punctuation">)</span>

  <span class="token comment">//\u975Epromise</span>
  Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token number">3</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>alert<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, 2, 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5FAE\u4EFB\u52A1" tabindex="-1"><a class="header-anchor" href="#\u5FAE\u4EFB\u52A1" aria-hidden="true">#</a> \u5FAE\u4EFB\u52A1</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> promise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;promise done!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//\u5F02\u6B65</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;code finished&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u8FD9\u4E2A alert \u5148\u663E\u793A</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u961F\u5217</strong></p><ul><li>\u5148\u8FDB\u5148\u51FA</li><li>promise\u5C31\u7EEA\u540E <code>.then</code>\u653E\u5165\u961F\u5217</li><li>\u8FD0\u884C\u5B8C\u5F53\u524D\u4EE3\u7801\u65F6 \u4ECE\u961F\u5217\u4E2D\u83B7\u53D6\u4EFB\u52A1</li><li>error\u672A\u5728\u961F\u5217\u672B\u5C3E\u5904\u7406\u65F6\u5C31\u4F1A\u51FA\u73B0<em>\u672A\u5904\u7406\u7684rejection</em>\u9519\u8BEF</li></ul><h2 id="async-await" tabindex="-1"><a class="header-anchor" href="#async-await" aria-hidden="true">#</a> async/await</h2><ul><li><strong>async</strong><ul><li><code>async function(){...}</code></li><li>\u4F7F\u51FD\u6570\u603B\u662F\u8FD4\u56DE\u4E00\u4E2Apromise</li><li>\u652F\u6301\u5728 Class \u4E2D\u4F7F\u7528</li></ul></li><li><strong>await</strong> (\u53EA\u80FD\u5728async\u51FD\u6570\u5185\u4F7F\u7528) <ul><li><code>let value = await promise</code></li><li>\u7B49promise\u5B8C\u6210\u5E76\u8FD4\u56DE\u7ED3\u679C</li><li>\u672C\u8D28\u7C7B\u4F3C<code>promise.then()</code> \u5904\u7406\u7B49\u5F85</li><li>\u73B0\u5141\u8BB8\u5728modules\u9876\u5C42\u4F7F\u7528 <ul><li><code>let user = await fetch(&#39;user.json&#39;)</code></li><li><code>(async ()=&gt;{await...})()</code> \u901A\u7528\u65B9\u6CD5</li></ul></li><li>\u652F\u6301<code>thenable</code>\u5BF9\u8C61</li><li>\u652F\u6301\u548C\u9759\u6001\u65B9\u6CD5\u4E00\u8D77\u7528 <ul><li><code>let results = await Promise.all(promises)</code></li></ul></li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//error\u5904\u7406\u65B9\u5F0F</span>
<span class="token comment">//1</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;no-such-url&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: failed to fetch</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;no-such-url&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// f() \u53D8\u6210\u4E86\u4E00\u4E2A rejected \u7684 promise</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>alert<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23);function m(v,f){const a=p("ExternalLinkIcon");return e(),o("div",null,[u,n("p",null,[n("a",r,[k,c(a)])]),d])}const h=t(l,[["render",m],["__file","promise.html.vue"]]);export{h as default};
